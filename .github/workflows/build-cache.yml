on:
  push:
    branches: [ test-build ]
  pull_request:
    branches: [ test-build ]

env:
  DEBIAN_FRONTEND: noninteractive
  CMAKE_BUILD_PARALLEL_LEVEL: 10
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++
  RDKIT_VERSION: 2022_03_2
  LD_LIBRARY_PATH: /usr/local/lib
  DEB_BUILD_OPTIONS: nocheck

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: Cache libboost-v1
      id: cache-libboost-v1
      uses: actions/cache@v3
      with:
        path: "~/boost"
        key: libboost_cache-v1

    - name: Install libboost-v1
      env:
        CACHE_HIT: ${{steps.cache-libboost-v1.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          sudo cp --force --recursive ~/boost/* /
        else
          sudo apt-get update && sudo apt-get install -yq libboost1.74-dev libboost1.74-all-dev
          mkdir -p ~/boost
          for dep in libboost1.74-dev; do
              dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/
          done
          export LIBBOOST=$(apt-cache depends libboost1.74-all-dev | awk '/Depends:/ {print $2}')
          for lib in $LIBBOOST; do 
              for deb in $lib; do 
                  dpkg -L $deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/ 
              done; 
          done      
        fi

    - name: test libboost-v1
      run: |
        whereis boost
        ls /usr/include
        ls /usr/lib/x86_64-linux-gnu | grep libboost_nowide.so

    - name: Cache coordgen
      uses: actions/cache@v3
      id: cache-coordgen
      with:
        path: "~/coordgen"
        key: coordgen
    - name: Install coordgen
      env:
        CACHE_HIT: ${{steps.cache-coordgen.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          ls  ~/coordgen/usr/include
          ls  ~/coordgen/usr/share
          sudo cp --force --recursive ~/coordgen/* /
        else
          sudo apt-get update && sudo apt-get install --yes libcoordgen-dev
          mkdir -p ~/coordgen
          sudo dpkg -L libcoordgen-dev | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/coordgen/
        fi

    - name: test coordgen
      run: |
        whereis coordgen
        ls
        ls ~/coordgen/usr/include
        ls ~/coordgen/usr/include/coordgen


    - name: Cache maeparser
      uses: actions/cache@v3
      id: cache-maeparser
      with:
        path: "~/maeparser"
        key: maeparser

    - name: Install maeparser
      env:
        CACHE_HIT: ${{steps.cache-maeparser.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          ls  ~/maeparser/usr/include
          ls  ~/maeparser/usr/
          sudo cp --force --recursive ~/maeparser/* /
        else
          sudo apt-get update && sudo apt-get install --yes libmaeparser-dev
          mkdir -p ~/maeparser
          sudo dpkg -L libmaeparser-dev | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/maeparser/
        fi

    - name: test maeparser
      run: |
        whereis maeparser
        ls
        ls ~/maeparser/usr/include
        ls ~/maeparser/usr/include/maeparser
#
#
#    - name: Cache cargo
#      id: cargo-cache
#      uses: actions/cache@v3
#      with:
#        path: |
#          ~/.cargo/bin/
#          ~/.cargo/registry/index/
#          ~/.cargo/registry/cache/
#          ~/.cargo/git/db/
#          target/
#        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#
#    - name: Install cargo
#      if: steps.cargo-cache.outputs.cache-hit != 'true'
#      run: |
#        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
#        source $HOME/.cargo/env
#
#    - name: test cargo
#      run: whereis cargo
#
    - name: Cache clang-llvm
      uses: actions/cache@v3
      id: cache-clang-llvm
      with:
        path: "~/clang"
        key: clang

    - name: Install clang-llvm
      env:
        CACHE_HIT: ${{steps.cache-clang-llvm.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          ls  ~/clang/usr/
          sudo cp --force --recursive ~/clang/* /
        else
          sudo apt-get update && sudo apt-get install --yes clang llvm libclang-dev
          mkdir -p ~/clang
          export LIBCLANG=$(apt-cache depends clang | awk '/Depends:/ {print $2}')
          export LIBLLVM=$(apt-cache depends llvm | awk '/Depends:/ {print $2}')
          export LIBCLANG_DEV=$(apt-cache depends libclang-dev | awk '/Depends:/ {print $2}')
          for lib in $LIBCLANG; do 
              for deb in $lib; do 
                  dpkg -L $deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/ 
              done; 
          done
          for lib in $LIBLLVM; do 
              for deb in $lib; do 
                  dpkg -L $deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/ 
              done; 
          done
          for lib in $LIBCLANG_DEV; do 
              for deb in $lib; do 
                  dpkg -L $deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/ 
              done; 
          done 
        fi

    - name: test clang
      run: |
        whereis clang
        whereis llvm-14
        clang --version

    - name: Cache cmake
      uses: actions/cache@v3
      id: cache-cmake
      with:
        path: "~/cmake"
        key: cmake

    - name: Install cmake
      env:
        CACHE_HIT: ${{steps.cache-cmake.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          ls  ~/cmake
          sudo cp --force --recursive ~/cmake/* /
        else
          sudo apt-get update && sudo apt-get install -yq cmake
          mkdir -p ~/cmake
          export LIBCMAKE=$(apt-cache depends cmake | awk '/Depends:/ {print $2}')
          dpkg -L cmake | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/cmake/
          for lib in $LIBCMAKE; do
             for deb in $lib; do
               dpkg -L $deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/cmake/
             done;
          done
        fi

    - name: test cmake
      run: |
        whereis cmake
        cmake --version
#
#    - name: Cache debian packages
#      uses: actions/cache@v3
#      id: cache-debian
#      with:
#        path: "~/debian"
#        key: debian
#
#    - name: Install debian packages
#      env:
#        CACHE_HIT: ${{steps.cache-debian.outputs.cache-hit}}
#      run: |
#        if [[ "$CACHE_HIT" == 'true' ]]; then
#          ls  ~/debian/
#          sudo cp --force --recursive ~/debian/* /
#        else
#          sudo apt-get update && sudo apt-get install --yes libc6-dev-arm64-cross ca-certificates dh-make debmake gem2deb npm2deb debhelper javahelper
#          mkdir -p ~/debian
#          sudo dpkg -L libc6-dev-arm64-cross | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/
#          sudo dpkg -L ca-certificates | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/
#          sudo dpkg -L dh-make | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/
#          sudo dpkg -L gem2deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/
#          sudo dpkg -L npm2deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/
#          sudo dpkg -L debhelper | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/
#          sudo dpkg -L javahelper | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/clang/
#        fi
#
#    - name: test debian_packages
#      run: |
#        whereis gem2deb
#        whereis javahelper
#        gem2deb --version
#
    - name: Cache libfreetype
      uses: actions/cache@v3
      id: cache-libfreetype
      with:
        path: "~/libfreetype"
        key: libfreetype

    - name: Install libfreetype
      env:
        CACHE_HIT: ${{steps.cache-libfreetype.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          ls  ~/libfreetype
          sudo cp --force --recursive ~/libfreetype/* /
        else
          sudo apt-get update && sudo apt-get install --yes libfreetype6-dev
          mkdir -p ~/libfreetype
          export LIBTYPE=$(apt-cache depends libfreetype-dev | awk '/Depends:/ {print $2}')
          dpkg -L libfreetype-dev | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/libfreetype/
          for lib in $LIBTYPE; do
             if [[ "$lib" != *"<"* ]]; then
                for deb in $lib; do
                  dpkg -L $deb | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/libfreetype/
                done;
            fi;
          done
        fi

    - name: test libfreetype
      run: |
        find | grep libfreetype6-dev


