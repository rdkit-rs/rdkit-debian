#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

export CPPFLAGS     := $(shell dpkg-buildflags --get CPPFLAGS)
export CFLAGS       := $(shell dpkg-buildflags --get CFLAGS) $(CPPFLAGS)
export CXXFLAGS     := $(shell dpkg-buildflags --get CXXFLAGS) $(CPPFLAGS)
export LDFLAGS      := $(shell dpkg-buildflags --get LDFLAGS)

export DOCDIR       := $(CURDIR)/debian/rdkit-doc/usr/share/doc/rdkit/

%:
	dh $@ --with python2 --buildsystem=cmake --parallel

override_dh_auto_clean:
	find $(CURDIR) -name "*.pyc" | xargs rm -f
	$(RM) -r Projects/DbCLI/testData/bzr/ Code/RDGeneral/versions.h rdkit/Chem/inchi.py
	$(RM) -r Docs/Book/_build Code/docs rdkit/docs Code/doxygen_sqlite3.db
	$(RM) \
	Code/ForceField/MMFF/test_data/MMFF94_dative_min.sdf \
	Code/ForceField/MMFF/test_data/MMFF94_dative_min_from_SMILES.sdf \
	Code/ForceField/MMFF/test_data/MMFF94_hypervalent_min.sdf \
	Code/ForceField/MMFF/test_data/MMFF94_hypervalent_min_from_SMILES.sdf \
	Code/ForceField/MMFF/test_data/MMFF94_reference.log \
	Code/ForceField/MMFF/test_data/MMFF94s_reference.log \
	Code/ForceField/MMFF/test_data/testMMFFForceField.log \
	Code/GraphMol/Depictor/test_data/cis_trans_cpp.out.sdf \
	Code/GraphMol/Depictor/test_data/collisions.out.sdf \
	Code/GraphMol/Depictor/test_data/first_200.out.sdf \
	Code/GraphMol/Depictor/test_data/test1.out.sdf \
	Code/GraphMol/FileParsers/test_data/blah.sdf \
	Code/GraphMol/FileParsers/test_data/cdk2_stereo.sdf \
	Code/GraphMol/FileParsers/test_data/outNCI_few.sdf \
	Code/GraphMol/FileParsers/test_data/outNCI_few.tdt \
	Code/GraphMol/FileParsers/test_data/outNCI_first_200.props.sdf \
	Code/GraphMol/FileParsers/test_data/outSmiles.csv \
	Code/GraphMol/ForceFieldHelpers/UFF/test_data/Issue62.sdf \
	Code/GraphMol/MolAlign/test_data/ref_e2_pyCrippenO3A.sdf \
	Code/GraphMol/SLNParse/lex.yysln.cpp \
	Code/GraphMol/SLNParse/sln.tab.cpp \
	Code/GraphMol/SLNParse/sln.tab.hpp \
	Code/GraphMol/SmilesParse/lex.yysmarts.cpp \
	Code/GraphMol/SmilesParse/lex.yysmiles.cpp \
	Code/GraphMol/SmilesParse/smarts.tab.cpp \
	Code/GraphMol/SmilesParse/smarts.tab.hpp \
	Code/GraphMol/SmilesParse/smiles.tab.cpp \
	Code/GraphMol/SmilesParse/smiles.tab.hpp \
	Code/GraphMol/Wrap/test_data/outNCI_few.sdf \
	Code/GraphMol/Wrap/test_data/outSmiles.txt \
	rdkit/ML/Data/test_data/testgeneral.dat.pkl \
	rdkit/ML/Data/test_data/testquant.qdat.pkl
	dh_auto_clean

override_dh_auto_configure:
	dh_auto_configure -- \
	    -DCMAKE_BUILD_TYPE=None -DCMAKE_SKIP_RPATH=ON \
	    -DRDK_INSTALL_INTREE=OFF -DRDK_INSTALL_STATIC_LIBS=OFF \
	    -DRDK_BUILD_THREADSAFE_SSS=ON -DRDK_BUILD_PYTHON_WRAPPERS=ON

override_dh_auto_build:
	dh_auto_build
	(cd $(CURDIR)/Code; doxygen doxygen/doxygen.config)
	(cd $(CURDIR)/rdkit; epydoc --config  epydoc.config)
	(cd $(CURDIR)/Docs/Book; RDBASE=$(CURDIR) $(MAKE) html)
	(cd $(CURDIR)/Docs/Book; RDBASE=$(CURDIR) $(MAKE) latexpdf)

override_dh_install:
	dh_numpy
	dh_install --list-missing
	mkdir -p $(DOCDIR)
	cp $(CURDIR)/Docs/Book/_build/latex/RDKit.pdf $(DOCDIR)
	cp -a $(CURDIR)/Docs/Book/_build/html $(DOCDIR)
 
override_dh_installchangelogs:
	dh_installchangelogs ReleaseNotes.txt


ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
override_dh_auto_test:
	cp -r rdkit obj-*/
	find $(CURDIR) -name rdchem.so
	#export RDBASE=$(CURDIR) PYTHONPATH=$(wildcard $(CURDIR)/obj-*/) LD_LIBRARY_PATH="$(wildcard $(CURDIR)/obj-*/)/lib:$(LD_LIBRARY_PATH)"
	-RDBASE=$(CURDIR) PYTHONPATH=$(wildcard $(CURDIR)/obj-*/):$(wildcard $(CURDIR)/obj-*/)/rdkit/Chem/ LD_LIBRARY_PATH="$(wildcard $(CURDIR)/obj-*/)/lib:$(LD_LIBRARY_PATH)" dh_auto_test
endif
